{
	"id": 397,
	"course_id": 11,
	"category_id": 75,
	"category_name": "C - Diccionarios, Hashing y Hash",
	"category_description": "",
	"name": "15 - Cuckoo guardar",
	"description": "Dar una implementaci\u00f3n en C de c\u00f3mo podr\u00eda ser la primitiva `hash_guardar` para el caso de un hash cerrado con Cuckoo Hashing con dos funciones de hashing (suponer que se llaman `h1` y `h2`). Si la clave ya se encontraba en el hash simplemente devolver `false` (no es necesario hacer un reemplazo del dato).\nSe puede asumir que la estructura no se redimensiona: en caso de toparse con una situaci\u00f3n de un ciclo, debe devolver `false`. \nLa estructura del Hash es:\n\n```cpp\ntypedef struct hash {                   typedef struct campo_hash {\n    campo_hash_t* tabla;                    char* clave;\n    size_t cantidad;                        void* dato;\n    size_t tam_tabla;                       int num_fhash;\n} hash_t;                               } campo_hash_t;\n```",
	"language": "c",
	"is_iotested": false,
	"active": true,
	"deleted": false,
	"points": 8,
	"file_id": 15688,
	"activity_unit_tests": "#include <criterion/criterion.h>  // No borrar esto!\n#include \"hash.h\"  // Modificar con el nombre de la api que se le entrega al alumno!\n#include <string.h> \n\nTest(misc, testUnElemento) {\n    hash_t* hash = hash_crear();\n    cr_assert(hash_guardar(hash, \"Mondi\", \"miau\"));\n    cr_assert(hash_pertenece(hash, \"Mondi\"));\n    cr_assert(strcmp(hash_obtener(hash, \"Mondi\"), \"miau\") == 0);\n    cr_assert(hash_cantidad(hash) == 1);\n    hash_destruir(hash);\n}\n\nTest(misc, testUnElementoRepetido) {\n    hash_t* hash = hash_crear();\n    cr_assert(hash_guardar(hash, \"Mondi\", \"miau\"));\n    cr_assert(!hash_guardar(hash, \"Mondi\", \"miau\"));\n    cr_assert(hash_pertenece(hash, \"Mondi\"));\n    cr_assert(strcmp(hash_obtener(hash, \"Mondi\"), \"miau\") == 0);\n    cr_assert(hash_cantidad(hash) == 1);\n    hash_destruir(hash);\n}\n\nTest(misc, testDosElementos) {\n    hash_t* hash = hash_crear();\n    hash_guardar(hash, \"Mondi\", \"miau\");\n    hash_guardar(hash, \"Viena\", \"miu\");\n    cr_assert(hash_pertenece(hash, \"Mondi\"));\n    cr_assert(hash_pertenece(hash, \"Viena\"));\n    cr_assert(strcmp(hash_obtener(hash, \"Mondi\"), \"miau\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Viena\"), \"miu\") == 0);\n    cr_assert(hash_cantidad(hash) == 2);\n    hash_destruir(hash);\n}\n\nTest(misc, testElementosConColisiones) {\n    hash_t* hash = hash_crear();\n    hash_guardar(hash, \"Mondi\", \"miau\");\n    hash_guardar(hash, \"Viena\", \"miu\");\n    hash_guardar(hash, \"Mruzka\", \"miauczec\");\n    cr_assert(hash_pertenece(hash, \"Mondi\"));\n    cr_assert(hash_pertenece(hash, \"Viena\"));\n    cr_assert(hash_pertenece(hash, \"Mruzka\"));\n    cr_assert(strcmp(hash_obtener(hash, \"Mondi\"), \"miau\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Viena\"), \"miu\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Mruzka\"), \"miauczec\") == 0);\n    cr_assert(hash_cantidad(hash) == 3);\n    hash_destruir(hash);\n}\n\nTest(misc, testElementosConColisionesYBorrados) {\n    hash_t* hash = hash_crear();\n    hash_guardar(hash, \"Mondi\", \"miau\");\n    hash_guardar(hash, \"Viena\", \"miu\");\n    hash_guardar(hash, \"Mruzka\", \"miauczec\");\n    hash_borrar(hash, \"Mondi\");\n    cr_assert(!hash_pertenece(hash, \"Mondi\"));\n    cr_assert(hash_pertenece(hash, \"Viena\"));\n    cr_assert(hash_pertenece(hash, \"Mruzka\"));\n    cr_assert(hash_obtener(hash, \"Mondi\") == NULL);\n    cr_assert(strcmp(hash_obtener(hash, \"Viena\"), \"miu\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Mruzka\"), \"miauczec\") == 0);\n    cr_assert(hash_cantidad(hash) == 2);\n    hash_borrar(hash, \"Viena\");\n    cr_assert(!hash_pertenece(hash, \"Mondi\"));\n    cr_assert(!hash_pertenece(hash, \"Viena\"));\n    cr_assert(hash_pertenece(hash, \"Mruzka\"));\n    cr_assert(hash_obtener(hash, \"Viena\") == NULL);\n    cr_assert(hash_cantidad(hash) == 1);\n    hash_destruir(hash);\n}\n\nTest(misc, testElementosConColisionesYCiclo) {\n    hash_t* hash = hash_crear();\n    cr_assert(hash_guardar(hash, \"Mondi\", \"miau\"));\n    cr_assert(hash_guardar(hash, \"Viena\", \"miu\"));\n    cr_assert(hash_guardar(hash, \"Mruzka\", \"miauczec\"));\n    cr_assert(!hash_guardar(hash, \"Viking\", \"Raaaar\"));\n    cr_assert(hash_pertenece(hash, \"Mondi\"));\n    cr_assert(hash_pertenece(hash, \"Viena\"));\n    cr_assert(hash_pertenece(hash, \"Mruzka\"));\n    cr_assert(!hash_pertenece(hash, \"Viking\"));\n    cr_assert(strcmp(hash_obtener(hash, \"Mondi\"), \"miau\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Viena\"), \"miu\") == 0);\n    cr_assert(strcmp(hash_obtener(hash, \"Mruzka\"), \"miauczec\") == 0);\n    cr_assert(hash_cantidad(hash) == 3);\n    hash_destruir(hash);\n}",
	"compilation_flags": "-g -O2 -std=c99 -Wall -Wformat=2 -Wshadow -Wpointer-arith -Wunreachable-code -Wconversion -Wno-sign-conversion -Wbad-function-cast",
	"activity_iotests": [],
	"date_created": "2020-10-19T15:16:07Z",
	"last_updated": "2020-10-28T15:42:58Z"
}
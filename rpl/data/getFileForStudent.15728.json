{
	"main.c": "#include \"dic_all.h\"\n#include <stdlib.h>\n#include <stddef.h>\n#include <string.h>\n\n// Pueden agregar la dependencia al TDA que quieran, inclusive agregar archivos de otros\n// TDAs que hayan implementado ustedes\n\nstruct dic_all {\n    // ??\n};\n\ndic_all_t* dic_all_crear() {\n    return NULL;\n}\n\nbool dic_all_guardar(dic_all_t* dic, const char* clave, int dato) {\n    return false;\n}\n\nint dic_all_obtener(dic_all_t* dic, const char* clave) {\n    // devolver 0 si no est\u00e1 el elemento\n    return 0;\n}\n\nint dic_all_borrar(dic_all_t* dic, const char* clave) {\n    // devolver 0 si no est\u00e1 el elemento\n    return 0;\n}\n\nbool dic_all_add(dic_all_t* dic, const char* clave, int valor) {\n    // devolver false si no esta la clave\n    return false;\n}\n\nvoid dic_all_add_all(dic_all_t* dic, int valor) {\n\n}\n\nvoid dic_all_destruir(dic_all_t* dic) {\n\n}",
	"hash.h": "#ifndef HASH_H\n#define HASH_H\n\n#include <stdbool.h>\n#include <stddef.h>\n\n// Los structs deben llamarse \"hash\" y \"hash_iter\".\nstruct hash;\nstruct hash_iter;\n\ntypedef struct hash hash_t;\ntypedef struct hash_iter hash_iter_t;\n\n// tipo de funci\u00f3n para destruir dato\ntypedef void (*hash_destruir_dato_t)(void *);\n\n/* Crea el hash\n */\nhash_t *hash_crear(hash_destruir_dato_t destruir_dato);\n\n/* Guarda un elemento en el hash, si la clave ya se encuentra en la\n * estructura, la reemplaza. De no poder guardarlo devuelve false.\n * Pre: La estructura hash fue inicializada\n * Post: Se almacen\u00f3 el par (clave, dato)\n */\nbool hash_guardar(hash_t *hash, const char *clave, void *dato);\n\n/* Borra un elemento del hash y devuelve el dato asociado.  Devuelve\n * NULL si el dato no estaba.\n * Pre: La estructura hash fue inicializada\n * Post: El elemento fue borrado de la estructura y se lo devolvi\u00f3,\n * en el caso de que estuviera guardado.\n */\nvoid *hash_borrar(hash_t *hash, const char *clave);\n\n/* Obtiene el valor de un elemento del hash, si la clave no se encuentra\n * devuelve NULL.\n * Pre: La estructura hash fue inicializada\n */\nvoid *hash_obtener(const hash_t *hash, const char *clave);\n\n/* Determina si clave pertenece o no al hash.\n * Pre: La estructura hash fue inicializada\n */\nbool hash_pertenece(const hash_t *hash, const char *clave);\n\n/* Devuelve la cantidad de elementos del hash.\n * Pre: La estructura hash fue inicializada\n */\nsize_t hash_cantidad(const hash_t *hash);\n\n/* Destruye la estructura liberando la memoria pedida y llamando a la funci\u00f3n\n * destruir para cada par (clave, dato).\n * Pre: La estructura hash fue inicializada\n * Post: La estructura hash fue destruida\n */\nvoid hash_destruir(hash_t *hash);\n\n/* Iterador del hash */\n\n// Crea iterador\nhash_iter_t *hash_iter_crear(const hash_t *hash);\n\n// Avanza iterador\nbool hash_iter_avanzar(hash_iter_t *iter);\n\n// Devuelve clave actual, esa clave no se puede modificar ni liberar.\nconst char *hash_iter_ver_actual(const hash_iter_t *iter);\n\n// Comprueba si termin\u00f3 la iteraci\u00f3n\nbool hash_iter_al_final(const hash_iter_t *iter);\n\n// Destruye iterador\nvoid hash_iter_destruir(hash_iter_t *iter);\n\n#endif  // HASH_H",
	"files_metadata": "{\"main.c\":{\"display\":\"read_write\"},\"hash.h\":{\"display\":\"read\"},\"hash.c\":{\"display\":\"hidden\"},\"dic_all.h\":{\"display\":\"read\"},\"lista.h\":{\"display\":\"hidden\"},\"lista.c\":{\"display\":\"hidden\"}}",
	"dic_all.h": "#ifndef DIC_ALL_H\n#define DIC_ALL_H\n\n#include <stdbool.h>\n\ntypedef struct dic_all dic_all_t;\n\ndic_all_t* dic_all_crear();\n\nbool dic_all_guardar(dic_all_t* dic, const char* clave, int dato);\n\nint dic_all_obtener(dic_all_t* dic, const char* clave);\n\nint dic_all_borrar(dic_all_t* dic, const char* clave);\n\nbool dic_all_add(dic_all_t* dic, const char* clave, int valor);\n\nvoid dic_all_add_all(dic_all_t* dic, int valor);\n\nvoid dic_all_destruir(dic_all_t* dic);\n\n#endif"
}